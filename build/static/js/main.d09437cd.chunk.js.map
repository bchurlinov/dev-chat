{"version":3,"sources":["store/actions/index.js","store/types.js","firebase.js","components/sidepanel/editUser.js","components/sidepanel/userPanel.js","components/sidepanel/directMessages.js","components/sidepanel/channels/addChannel.js","components/sidepanel/channels/renderChannels.js","components/sidepanel/channels/channels.js","components/sidepanel/SidePanel.js","components/messages/isTyping.js","components/messages/messageHeader.js","components/messages/renderMessages.js","components/widgets/fileUploader/FileUploader.js","components/messages/messageForm.js","components/messages/messageComponent.js","components/channelinfo/ChannelInfo.js","components/widgets/loader/Loader.js","App.js","components/authentication/Login.js","components/authentication/Register.js","store/reducers/index.js","index.js"],"names":["setCurrentChannel","channel","type","payload","currentChannel","setChannelType","channelType","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","styles","heading","marginBottom","fontSize","textAlign","icon","marginRight","position","top","display","EditUser","user","isVisible","toggleModal","useState","name","email","inputs","setInputs","changeHandler","event","target","value","success","message","checkIfValid","checkNameValid","checkEmailValid","console","log","match","length","title","style","data-type","visible","footer","onCancel","className","src","photoURL","alt","onSubmit","preventDefault","setTimeout","updateProfile","displayName","then","updateEmail","database","ref","child","uid","update","avatar","id","noValidate","onChange","placeholder","htmlType","UserPanel","props","userModal","setUserModal","toggleEditUserModal","menu","Item","onClick","href","auth","signOut","remove","overlay","defaultProps","connect","dispatch","users","setUsers","useEffect","allUsers","usersRef","on","snapshot","val","userObject","status","push","set","onDisconnect","key","getStatus","off","userId","updatedUsers","_","reduce","acc","concat","setActiveUserClass","includes","getUserData","clickedUser","setUserChannel","totalUsers","map","index","indicator","background","statusIndicator","renderUsersList","AddChannel","modalVisibility","clicked","addChannel","description","errMessage","errors","setErrors","handleInputChange","formIsValid","validChannelName","validChannelDescription","error","err","checkErrorClass","some","toLowerCase","onOk","TextArea","rows","setChannel","sendChannels","addCurrentChannelClass","setActiveChannel","updatedChannels","modal","setModal","allChannels","setAllChannels","channelsRef","channels","setFirstChannel","getChannels","firstChannel","undefined","channelInformation","details","createdBy","snap","SidePanel","state","this","Component","IsTyping","sendTyping","typing","usersTyping","setUsersTyping","typingUsers","isTypingRef","filter","item","showTypingUsers","Search","Input","MessageHeader","loader","messages","channelTypeIcon","setChannelTypeIcon","uniqBy","getChannelUsers","search","onKeyUp","filtered","loading","width","RenderMessages","useLayoutEffect","container","document","getElementById","scrollTo","scrollHeight","allMessages","moment","timestamp","fromNow","hasOwnProperty","content","image","height","objectFit","checkTextImage","ImageUploader","isUploading","progress","imageUrl","handleUploadStart","setState","handleProgress","handleUploadError","handleUploadSuccess","filename","storage","getDownloadURL","url","imageData","accept","randomizeFilename","storageRef","onUploadStart","onUploadError","onUploadSuccess","onProgress","marginTop","percent","MessageForm","emojiPicker","setEmojiPicker","submitHandler","senderMessage","ServerValue","TIMESTAMP","inputValid","handleAddEmoji","emoji","native","toggleEmojiPicker","autoComplete","onKeyDown","keyCode","bottom","left","zIndex","onSelect","okText","data","getImageData","updatedMessages","setMessages","filteredMessages","setFilteredMessages","searchTerm","setSearchTerm","searchLoader","setSearchLoader","messagesRef","getMessages","isTyping","setIsTyping","channelUsers","reducedMessages","sum","sender","handleSearch","filterMessages","searchRegex","RegExp","trackIsTyping","Panel","Collapse","ChannelInfo","posters","setPosters","usersMessages","result","values","groupBy","d","count","sorted","orderBy","renderChannelIcon","channelInfo","header","poster","postsCount","setTopPosters","renderChannel","Loader","App","firstLoading","currentUser","Math","random","Login","password","formErrors","setFormErrors","setLoader","handleInput","checkPasswordValid","signInWithEmailAndPassword","catch","disabled","Link","to","Register","passwordconfirm","saveUser","emptyInputFields","emailValid","passWordsLength","comparePasswords","notValid","keyword","createUserWithEmailAndPassword","createdUser","md5","initialUserState","isLoading","initialChannelState","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","Root","onAuthStateChanged","setUser","history","Switch","Route","exact","path","component","Redirect","RootWithStore","withRouter","ReactDOM","render","BrowserRouter"],"mappings":"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","file":"static/js/main.d09437cd.chunk.js","sourcesContent":["import * as actionTypes from \"../types\";\r\n\r\n/* User Actions */\r\n\r\nexport const setUser = (user) => {\r\n    return {\r\n        type: actionTypes.SET_USER,\r\n        payload: {\r\n            currentUser: user\r\n        }\r\n    }\r\n};\r\n\r\nexport const clearUser = () => {\r\n    return {\r\n        type: actionTypes.CLEAR_USER\r\n    }\r\n};\r\n\r\n/* Channel Actions */\r\n\r\nexport const setCurrentChannel = channel => {\r\n    return {\r\n        type: actionTypes.SET_CURRENT_CHANNEL,\r\n        payload: {\r\n            currentChannel: channel\r\n        }\r\n    }\r\n};\r\n\r\nexport const setChannelType = channelType => {\r\n    return {\r\n        type: actionTypes.SET_CHANNEL_TYPE,\r\n        payload: channelType\r\n    }\r\n};\r\n","/* User Action Types */\r\n\r\nexport const SET_USER = \"SET_USER\";\r\nexport const CLEAR_USER = \"CLEAR_USER\";\r\n\r\n/* Channel Action Types */\r\nexport const SET_CURRENT_CHANNEL = \"SET_CURRENT_CHANNEL\";\r\nexport const SET_CHANNEL_TYPE = \"SET_CHANNEL_TYPE\";","import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCcr13AZkolsXAV96UM1XRIy4w1wB7kIq0\",\r\n    authDomain: \"bojan-b3887.firebaseapp.com\",\r\n    databaseURL: \"https://bojan-b3887.firebaseio.com\",\r\n    projectId: \"bojan-b3887\",\r\n    storageBucket: \"bojan-b3887.appspot.com\",\r\n    messagingSenderId: \"112203988888\",\r\n    appId: \"1:112203988888:web:5ceadf01c7b3d93c3a75ed\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React, { useState } from 'react';\r\nimport { Modal, Icon, Button, Input, message } from \"antd\";\r\nimport firebase from \"../../firebase\";\r\nimport \"./editUser.scss\";\r\n\r\nconst styles = {\r\n    heading: {\r\n        marginBottom: 0,\r\n        fontSize: \"18px\",\r\n        textAlign: \"center\"\r\n    },\r\n\r\n    icon: {\r\n        marginRight: \"5px\",\r\n        fontSize: \"20px\",\r\n        position: \"relative\",\r\n        top: \"1px\",\r\n        display: \"inline-block\"\r\n    }\r\n};\r\n\r\nconst EditUser = ({user, isVisible, toggleModal}) => {\r\n\r\n    const [inputs, setInputs] = useState({\r\n        name: \"\",\r\n        email: \"\"\r\n    });\r\n\r\n    const changeHandler = event => {\r\n        setInputs({\r\n            ...inputs,\r\n            [event.target.name]: event.target.value\r\n        })\r\n    };\r\n\r\n    const submitFormHandler = event => {\r\n        event.preventDefault();\r\n\r\n        if (checkIfValid()) {\r\n            success();\r\n            setTimeout(() => {\r\n                toggleModal();\r\n            }, 1750);\r\n\r\n            user.updateProfile({\r\n                displayName: inputs.name\r\n            }).then(() => {\r\n                user.updateEmail(inputs.email ? inputs.email : user.email)\r\n            }).then(() => {\r\n                firebase.database().ref(\"users\").child(user.uid).update({\r\n                    user: user.displayName,\r\n                    avatar: user.photoURL,\r\n                    id: user.uid\r\n                })\r\n            })\r\n        }\r\n    };\r\n\r\n    const success = () => {\r\n        message.success('Channel created successfully', 2);\r\n    };\r\n\r\n    const checkIfValid = () => {\r\n        if (!checkNameValid()) {\r\n            console.log(\"name invalid\");\r\n            return false\r\n        } else if (!checkEmailValid()) {\r\n            console.log(\"email invalid\");\r\n            return false\r\n        } else {\r\n            return true\r\n        }\r\n    };\r\n\r\n    const checkEmailValid = () => {\r\n        if (inputs.email.match(/\\S+@\\S+\\.\\S+/) || inputs.email === \"\") {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    };\r\n\r\n    const checkNameValid = () => {\r\n        if (inputs.name === \"\" || inputs.name.length < 2) {\r\n            return false\r\n        } else {\r\n            return true\r\n        }\r\n    };\r\n\r\n    console.log(user);\r\n\r\n    return (\r\n        <div>\r\n            <Modal\r\n                title={\r\n                    <h3 style={styles.heading}>\r\n                        <Icon type=\"user\" data-type=\"channel\" style={styles.icon}/> Edit user\r\n                    </h3>\r\n                }\r\n                visible={isVisible}\r\n                footer={null}\r\n                onCancel={toggleModal}\r\n            >\r\n                <div className=\"editUserCard\">\r\n                    <div className=\"editUserCard__photo\">\r\n                        <img src={user.photoURL} alt=\"Dev Chat User Image\"/>\r\n                    </div>\r\n                    <div className=\"editUserCard__user\">\r\n                        <form onSubmit={submitFormHandler} noValidate>\r\n                            <div className=\"form-group\">\r\n                                <label>Name:</label>\r\n                                <Input\r\n                                    name=\"name\"\r\n                                    type=\"text\"\r\n                                    onChange={changeHandler}\r\n                                    placeholder={user && user.displayName}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label>Email:</label>\r\n                                <Input\r\n                                    name=\"email\"\r\n                                    type=\"email\"\r\n                                    onChange={changeHandler}\r\n                                    placeholder={user && user.email}\r\n                                />\r\n                            </div>\r\n                            <div style={{textAlign: \"center\"}}>\r\n                                <Button type=\"primary\" htmlType=\"submit\">Submit changes</Button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditUser;","import React, {useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Dropdown, Icon, Menu } from \"antd\";\r\nimport EditUser from \"./editUser\";\r\nimport firebase from \"../../firebase\";\r\nimport \"./userPanel.scss\";\r\n\r\nconst UserPanel = props => {\r\n\r\n    const { user } = props;\r\n\r\n    const [userModal, setUserModal] = useState({isVisible: false});\r\n\r\n    const toggleEditUserModal = () => {\r\n        setUserModal({\r\n            ...userModal,\r\n            isVisible: !userModal.isVisible\r\n        })\r\n    };\r\n\r\n    const logOut = () => {\r\n        firebase.auth().signOut().then(() => {\r\n            firebase.database().ref(\"presence\").child(user.uid).remove();\r\n        });\r\n    };\r\n\r\n    const menu = (\r\n        <Menu>\r\n            <Menu.Item className=\"user-panel-menu-item\">\r\n                <a onClick={toggleEditUserModal} href=\"# \">\r\n                    <Icon type=\"edit\" /> Edit User\r\n                </a>\r\n            </Menu.Item>\r\n            <Menu.Item className=\"user-panel-menu-item\">\r\n                <a onClick={logOut} href=\"# \">\r\n                    <Icon type=\"import\" /> Log Out\r\n            </a>\r\n            </Menu.Item>\r\n        </Menu>\r\n    );\r\n\r\n    return (\r\n        <div className=\"user-panel\">\r\n            <Dropdown overlay={menu}>\r\n                <a className=\"ant-dropdown-link\" href=\"# \">\r\n                    <img src={user && user.photoURL} alt=\"Dev Chat Image\" /> Welcome, <span>{user && user.displayName}</span> <Icon type=\"down\" />\r\n                </a>\r\n            </Dropdown>\r\n\r\n            <EditUser\r\n                user={user}\r\n                isVisible={userModal.isVisible}\r\n                toggleModal={() => toggleEditUserModal()}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nUserPanel.propTypes = {\r\n    photoURL: PropTypes.string,\r\n    displayName: PropTypes.string\r\n};\r\n\r\nUserPanel.defaultProps = {\r\n    displayName: \"User\"\r\n};\r\n\r\nexport default UserPanel;","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setCurrentChannel, setChannelType } from \"../../store/actions/index\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Icon } from \"antd\";\r\nimport firebase from \"../../firebase\";\r\nimport _ from \"lodash\";\r\nimport \"./directMessages.scss\";\r\n\r\nconst DirectMessages = (props) => {\r\n\r\n    const { user } = props;\r\n    const { channel } = props;\r\n    const [users, setUsers] = useState({ users: [] });\r\n\r\n    useEffect(() => {\r\n\r\n        let allUsers = [];\r\n        let usersRef = firebase.database().ref(\"users\");\r\n        const listener = usersRef.on(\"child_added\", snapshot => {\r\n            if (snapshot) {\r\n                if (user.uid !== snapshot.val().id) {\r\n\r\n                    console.log(snapshot.val());\r\n\r\n                    const userObject = {\r\n                        avatar: snapshot.val().avatar,\r\n                        id: snapshot.val().id,\r\n                        user: snapshot.val().user,\r\n                        status: \"offline\"\r\n                    };\r\n\r\n                    allUsers.push(userObject);\r\n\r\n                    setUsers({\r\n                        ...users,\r\n                        users: allUsers\r\n                    })\r\n                }\r\n            }\r\n        });\r\n\r\n        firebase.database().ref(\".info/connected\").on(\"value\", snapshot => {\r\n            if (snapshot.val() === true) {\r\n                const ref = firebase.database().ref(\"presence\").child(user.uid);\r\n                ref.set(true);\r\n                ref.onDisconnect().remove()\r\n            }\r\n        });\r\n\r\n        firebase.database().ref(\"presence\").on(\"child_added\", snapshot => {\r\n            if (snapshot.key !== user.uid) {\r\n                getStatus(snapshot.key, true, allUsers);\r\n            }\r\n        });\r\n\r\n        firebase.database().ref(\"presence\").on(\"child_removed\", snapshot => {\r\n            if (snapshot.key !== user.uid) {\r\n                getStatus(snapshot.key, false, allUsers)\r\n            }\r\n        });\r\n\r\n        return () => usersRef.off();\r\n\r\n    }, []);\r\n\r\n    const getStatus = (userId, status, allUsers) => {\r\n\r\n        const updatedUsers = _.reduce(allUsers, (acc, user) => {\r\n            if (user.id === userId) {\r\n                user[\"status\"] = `${status ? \"online\" : \"offline\"}`;\r\n            }\r\n            return acc.concat(user);\r\n        }, []);\r\n\r\n        setUsers({\r\n            ...users,\r\n            users: updatedUsers\r\n        })\r\n    };\r\n\r\n    const totalUsers = () => {\r\n        if (users && users.users.length !== 0) {\r\n            return users.users.length\r\n        }\r\n    };\r\n\r\n    const statusIndicator = user => {\r\n        let indicator = null;\r\n\r\n        if (user.status === \"online\") {\r\n            indicator = <span style={{ background: \"#66ff66\" }}></span>\r\n        } else if (user.status === \"offline\") {\r\n            indicator = <span style={{ background: \"#ff3232\" }}></span>\r\n        }\r\n\r\n        return indicator;\r\n    };\r\n\r\n\r\n    const renderUsersList = users => {\r\n        if (users) {\r\n            return _.map(users, (user, index) => {\r\n                return (\r\n                    <li key={index}\r\n                        onClick={() => getUserData(user)}\r\n                        className={setActiveUserClass(user)}\r\n                    >\r\n                        {statusIndicator(user)} {user.user}\r\n                    </li>\r\n                )\r\n            })\r\n        }\r\n    };\r\n\r\n    const setActiveUserClass = user => {\r\n        if(channel){\r\n            return  _.includes(channel.id, user.id) ? \"active-user\" : \"\";\r\n        }\r\n    };\r\n\r\n    const getUserData = clickedUser => {\r\n\r\n        const setUserChannel = {\r\n            avatar: clickedUser.avatar,\r\n            name: clickedUser.user,\r\n            id: clickedUser.id < user.uid ? `${clickedUser.id}-${user.uid}` : `${user.uid}-${clickedUser.id}`\r\n        };\r\n\r\n        props.setCurrentChannel(setUserChannel);\r\n        props.setChannelType(\"private\")\r\n    };\r\n\r\n    return (\r\n        <div className=\"direct-messages\">\r\n            <h3><Icon type=\"mail\" />Direct Messages {\" \"}( <b> {totalUsers()} </b> )</h3>\r\n            <ul>\r\n                {renderUsersList(users.users)}\r\n            </ul>\r\n        </div>\r\n    )\r\n};\r\n\r\nDirectMessages.propTypes = {\r\n    user: PropTypes.object\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setCurrentChannel: (currentChannel) => dispatch(setCurrentChannel(currentChannel)),\r\n        setChannelType: (type) => dispatch(setChannelType(type))\r\n    }\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(DirectMessages);","import React, { useState } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { Icon, Modal, Input, Button, message } from \"antd\";\r\nimport _ from \"lodash\";\r\nimport \"./channels.scss\";\r\n\r\nconst AddChannel = ({ modalVisibility, clicked, addChannel }) => {\r\n\r\n    const [inputs, setInputs] = useState({\r\n        name: \"\",\r\n        description: \"\"\r\n    });\r\n\r\n    const [errors, setErrors] = useState({\r\n        errMessage: []\r\n    });\r\n\r\n    const styles = {\r\n        heading: {\r\n            marginBottom: 0,\r\n            fontSize: \"18px\",\r\n            textAlign: \"center\"\r\n        },\r\n\r\n        icon: {\r\n            marginRight: \"10px\",\r\n            fontSize: \"20px\",\r\n            position: \"relative\",\r\n            top: \"1px\",\r\n            display: \"inline-block\"\r\n        }\r\n    };\r\n\r\n    const handleInputChange = event => {\r\n        setInputs({\r\n            ...inputs,\r\n            [event.target.name]: event.target.value\r\n        })\r\n    };\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        if (formIsValid()) {\r\n            addChannel(inputs);\r\n\r\n            setInputs({\r\n                ...inputs,\r\n                name: \"\",\r\n                description: \"\"\r\n            });\r\n\r\n            setTimeout(() => {\r\n                clicked();\r\n            }, 1750);\r\n        }\r\n    };\r\n\r\n    const success = () => {\r\n        message.success('Channel created successfully', 2);\r\n    };\r\n\r\n    const formIsValid = () => {\r\n        if (!validChannelName()) {\r\n            return false;\r\n        } else if (!validChannelDescription()) {\r\n            return false;\r\n        } else {\r\n            setErrors({\r\n                ...errors,\r\n                errMessage: []\r\n            });\r\n            return true;\r\n        }\r\n    };\r\n\r\n    const validChannelName = () => {\r\n        let error = \"\";\r\n        let err = [];\r\n\r\n        if (inputs.name.length === 0) {\r\n            error = \"Channel name field can't be empty\";\r\n            setErrors({\r\n                ...errors,\r\n                errMessage: err.concat(error)\r\n            });\r\n            return false;\r\n        } else if (inputs.name.length < 2) {\r\n            error = \"Channel name field should contain at least 2 letters\";\r\n            setErrors({\r\n                ...errors,\r\n                errMessage: err.concat(error)\r\n            });\r\n            return false;\r\n        } else if (!inputs.name.match(/^[a-zA-Z]+$/)) {\r\n            error = \"Channel name field shouldn't contain numbers or special characters\";\r\n            setErrors({\r\n                ...errors,\r\n                errMessage: err.concat(error)\r\n            });\r\n            return false;\r\n        } else {\r\n            return true\r\n        }\r\n    };\r\n\r\n    const validChannelDescription = () => {\r\n        let error = \"\";\r\n        let err = [];\r\n\r\n        if (inputs.description.length === 0) {\r\n            error = \"Channel description field can't be empty\";\r\n            setErrors({\r\n                ...errors,\r\n                errMessage: err.concat(error)\r\n            });\r\n            return false;\r\n        } else if (inputs.description.length < 10) {\r\n            error = \"Channel description should contain at least 10 letters\"\r\n            setErrors({\r\n                ...errors,\r\n                errMessage: err.concat(error)\r\n            });\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    const renderErrorMessages = () => {\r\n        return _.map(errors.errMessage, (error, index) => {\r\n            return <p key={index}>{error}</p>\r\n        })\r\n    };\r\n\r\n    const checkErrorClass = name => {\r\n        return _.some(errors.errMessage, message => {\r\n            return message.toLowerCase().includes(name)\r\n        }) ? \"not-valid\" : \"valid\";\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Modal\r\n                title={\r\n                    <h3 style={styles.heading}>\r\n                        <Icon type=\"interaction\" data-type=\"channel\" style={styles.icon} /> Add a channel\r\n                    </h3>\r\n                }\r\n                visible={modalVisibility}\r\n                onOk={addChannel}\r\n                onCancel={clicked}\r\n                footer={null}\r\n            >\r\n                <div className=\"channel-modal\">\r\n                    <form onSubmit={handleSubmit}>\r\n                        <div className=\"form-group\">\r\n                            <label>Add channel name: </label>\r\n                            <Input\r\n                                onChange={handleInputChange}\r\n                                className={checkErrorClass(\"name\")}\r\n                                value={inputs.name}\r\n                                name=\"name\"\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Add channel description: </label>\r\n                            <Input.TextArea\r\n                                onChange={handleInputChange}\r\n                                className={checkErrorClass(\"description\")}\r\n                                value={inputs.description}\r\n                                name=\"description\"\r\n                                rows={4}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"render-channel-errors\">\r\n                            {renderErrorMessages()}\r\n                        </div>\r\n\r\n                        <div className=\"form-group\" style={{ textAlign: \"center\" }}>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                <Icon type=\"plus-circle\" />Add Channel\r\n                            </Button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nAddChannel.propTypes = {\r\n    modalVisibility: PropTypes.bool,\r\n    addChannel: PropTypes.func,\r\n    clicked: PropTypes.func\r\n};\r\n\r\nexport default AddChannel;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {setCurrentChannel, setChannelType} from \"../../../store/actions\";\r\nimport _ from \"lodash\";\r\nimport \"./channels.scss\";\r\n\r\nconst RenderChannels = ({sendChannels, setCurrentChannel, setChannelType, currentChannel}) => {\r\n\r\n    const displayChannels = () => {\r\n       return sendChannels && _.map(sendChannels.updatedChannels, (channel,index) => {\r\n           return (\r\n               <li key={index} onClick={() => setActiveChannel(channel)} className={addCurrentChannelClass(channel)}>\r\n                   <span>#</span> {channel.name}\r\n               </li>\r\n           )\r\n       })\r\n    };\r\n\r\n    const addCurrentChannelClass = (channel) => {\r\n        if(currentChannel) {\r\n            if(currentChannel.id === channel.id) {\r\n                return \"active-channel\"\r\n            }\r\n        }\r\n    };\r\n\r\n    const setActiveChannel = currentChannel => {\r\n        setCurrentChannel(currentChannel);\r\n        setChannelType(\"public\")\r\n    };\r\n\r\n    return(\r\n        <div className=\"display-channels\">\r\n            <ul>\r\n                {displayChannels()}\r\n            </ul>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setCurrentChannel: (setChannel) => dispatch(setCurrentChannel(setChannel)),\r\n        setChannelType: (type) => dispatch(setChannelType(type))\r\n    }\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(RenderChannels);\r\n","import React, {useEffect, useState} from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport {setCurrentChannel, setChannelType} from \"../../../store/actions\";\r\nimport { Icon, message } from \"antd\";\r\nimport AddChannel from \"./addChannel\";\r\nimport firebase from \"../../../firebase\";\r\nimport RenderChannels from \"./renderChannels\";\r\nimport \"./channels.scss\";\r\n\r\nconst Channels = ({ user, currentChannel, setCurrentChannel, setChannelType }) => {\r\n\r\n    const [modal, setModal] = useState({ isVisible: false });\r\n\r\n    const addChannel = inputs => {\r\n        const { name, description } = inputs;\r\n        const channelsRef = firebase.database().ref(\"channels\");\r\n        const key = channelsRef.push().key;\r\n\r\n        const channelInformation = {\r\n            name: name,\r\n            details: description,\r\n            id: key,\r\n            createdBy: {\r\n                name: user.displayName,\r\n                avatar: user.photoURL\r\n            }\r\n        };\r\n\r\n        success();\r\n\r\n        setTimeout(() => {\r\n            setModal({\r\n                ...modal,\r\n                isVisible: false\r\n            });\r\n        }, 1750);\r\n\r\n        channelsRef.child(key).update(channelInformation).then( snap => {\r\n            console.log(\"Channel Added\");\r\n        })\r\n    };\r\n\r\n    const success = () => {\r\n        message.success('Channel successfully created', 2);\r\n    };\r\n\r\n\r\n    const toggleModal = () => {\r\n        setModal({\r\n            ...modal,\r\n            isVisible: !modal.isVisible\r\n        })\r\n    };\r\n\r\n    const [allChannels, setAllChannels] = useState({\r\n        updatedChannels: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        let updatedChannels = [];\r\n\r\n        const channelsRef = firebase.database().ref(\"channels\");\r\n        channelsRef.on(\"child_added\", snapshot => {\r\n            let channels = snapshot.val();\r\n            updatedChannels.push(channels);\r\n\r\n            setAllChannels({\r\n                ...allChannels,\r\n                updatedChannels\r\n            });\r\n\r\n            setFirstChannel(updatedChannels)\r\n        });\r\n\r\n        return () => channelsRef.off();\r\n\r\n    }, []);\r\n\r\n    const setFirstChannel = getChannels => {\r\n        const firstChannel = getChannels[0];\r\n\r\n        if(firstChannel !== undefined) {\r\n            setCurrentChannel(firstChannel);\r\n            setChannelType(\"public\");\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"channels\">\r\n            <h3>\r\n                <Icon type=\"interaction\" data-type=\"channel\" /> Channels\r\n                <span onClick={toggleModal}><Icon type=\"plus-circle\" /></span>\r\n            </h3>\r\n\r\n            <AddChannel\r\n                modalVisibility={modal.isVisible}\r\n                addChannel={(inputs) => addChannel(inputs)}\r\n                clicked={toggleModal}\r\n            />\r\n\r\n            <RenderChannels\r\n                sendChannels={allChannels}\r\n                currentChannel={currentChannel}\r\n                key={allChannels}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n      setCurrentChannel: (currentChannel) => dispatch(setCurrentChannel(currentChannel)),\r\n      setChannelType: (type) => dispatch(setChannelType(type))\r\n  }\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Channels);","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport UserPanel from \"./userPanel\";\r\nimport DirectMessages from \"./directMessages\";\r\nimport Channels from \"./channels/channels\";\r\nimport { Icon } from \"antd\";\r\nimport \"./SidePanel.scss\";\r\n\r\nclass SidePanel extends Component {\r\n\r\n    state = {\r\n        user: this.props.user\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chat-wrapper__item\">\r\n                <div className=\"side-panel-logo\">\r\n                    <h1>\r\n                        <Icon type=\"wechat\" /> Dev<span>Chat</span>\r\n                    </h1>\r\n                </div>\r\n\r\n                <UserPanel\r\n                    user={this.state.user}\r\n                />\r\n\r\n                <Channels\r\n                    user={this.state.user}\r\n                    currentChannel={this.props.currentChannel}\r\n                />\r\n\r\n                <DirectMessages\r\n                    user={this.state.user}\r\n                    channel={this.props.currentChannel}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentChannel: state.channel.currentChannel\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(SidePanel);","import React, { useState, useEffect } from \"react\";\r\nimport firebase from \"../../firebase\";\r\nimport _ from \"lodash\";\r\nimport \"./isTyping.scss\";\r\n\r\nconst IsTyping = ({ channel, user, sendTyping }) => {\r\n\r\n    const [usersTyping, setUsersTyping] = useState({ typing: [] })\r\n\r\n    useEffect(() => {\r\n\r\n        if (channel) {\r\n\r\n            let typingUsers = [];\r\n            const isTypingRef = firebase.database().ref(\"isTyping\").child(channel.id);\r\n            isTypingRef.on(\"child_added\", snapshot => {\r\n                if (snapshot.key !== user.uid) {\r\n                    typingUsers = typingUsers.concat({\r\n                        id: snapshot.key,\r\n                        name: snapshot.val()\r\n                    });\r\n\r\n                    setUsersTyping({\r\n                        ...usersTyping,\r\n                        typing: typingUsers\r\n                    })\r\n                }\r\n            });\r\n\r\n            isTypingRef.on(\"child_removed\", snapshot => {\r\n                const user_not = _.includes(typingUsers, (user.id === snapshot.key));\r\n\r\n                if (!user_not) {\r\n                    typingUsers = _.filter(typingUsers, (user) => {\r\n                        return user.id !== snapshot.key\r\n                    });\r\n\r\n                    setUsersTyping({\r\n                        ...usersTyping,\r\n                        typing: typingUsers\r\n                    })\r\n                }\r\n            });\r\n\r\n            firebase.database().ref(\".info/connected\").on(\"value\", snap => {\r\n                if (snap.val() === true) {\r\n                    firebase.database().ref(\"isTyping\").child(channel.id).child(user.uid).onDisconnect().remove()\r\n                }\r\n            });\r\n\r\n            return () => isTypingRef.off();\r\n        }\r\n\r\n    }, [sendTyping.length]);\r\n\r\n    const renderDots = () => {\r\n        return (\r\n            <>\r\n                <span className=\"dot\"></span>\r\n                <span className=\"dot\"></span>\r\n                <span className=\"dot\"></span>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const showTypingUsers = () => {\r\n        if (usersTyping.typing) {\r\n            return _.map(usersTyping.typing, (item, index) => {\r\n                return <p key={index}><b>{item.name}</b> <span>is typing</span> {renderDots()}</p>\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"isTyping-container\">\r\n            {showTypingUsers()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IsTyping;","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { Input, Icon } from \"antd\";\r\nimport _ from \"lodash\";\r\nimport \"./messageHeader.scss\";\r\n\r\nconst { Search } = Input;\r\n\r\nconst MessageHeader = props => {\r\n\r\n    const { channel, loader, messages, channelType } = props;\r\n\r\n    const getChannelUsers = () => {\r\n        let users = [];\r\n\r\n        const getUniqueMessages = _.map(messages, (message,index) => {\r\n            users.push(message.user.name)\r\n        });\r\n\r\n        const getUniqueUsers = _.uniqBy(users);\r\n\r\n        return getUniqueUsers.length\r\n    };\r\n\r\n    const setChannelTypeIcon = () => {\r\n       let channelTypeIcon = null;\r\n\r\n       if(channelType === \"private\") {\r\n           channelTypeIcon = <Icon type=\"user\" />\r\n       } else if(channelType === \"public\") {\r\n           channelTypeIcon = <Icon type=\"number\" />\r\n       }\r\n\r\n       return channelTypeIcon;\r\n    };\r\n\r\n    return (\r\n        <div className=\"message-header\">\r\n            <div className=\"message-header__item\">\r\n                <h3>\r\n                    {setChannelTypeIcon()}\r\n                    {channel && channel.name} <span>( {getChannelUsers()} users )</span>\r\n                </h3>\r\n            </div>\r\n\r\n            <div className=\"message-header__item\">\r\n                <Search\r\n                    placeholder=\"Search messages...\"\r\n                    onChange={value => props.search(value)}\r\n                    onKeyUp={() => props.filtered()}\r\n                    loading={loader}\r\n                    style={{ width: 200 }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nMessageHeader.propTypes = {\r\n    channel: PropTypes.object,\r\n    loader: PropTypes.bool\r\n}\r\n\r\nexport default MessageHeader;","import React, { useLayoutEffect } from 'react';\r\nimport moment from \"moment\";\r\nimport _ from \"lodash\";\r\nimport \"./renderMessages.scss\";\r\n\r\nconst RenderMessages = props => {\r\n\r\n    const { messages } = props;\r\n    const { channel } = props;\r\n\r\n    useLayoutEffect(() => {\r\n        const container = document.getElementById(\"render-messages-container\");\r\n        container.scrollTo(0, container.scrollHeight)\r\n    }, [messages.length]);\r\n\r\n    const checkTextImage = message => {\r\n        let text = \"\";\r\n        let image = \"\";\r\n\r\n        if (message.hasOwnProperty(\"content\")) {\r\n            return text = <p>{message.content}</p>\r\n        } else if (message.hasOwnProperty(\"image\")) {\r\n            return image = <img src={message.image} style={{ width: \"100%\", height: \"350px\", objectFit: \"cover\" }} alt=\"Dev Chat Image\"/>\r\n        }\r\n    };\r\n\r\n    const showMessages = allMessages => {\r\n        return allMessages && _.map(allMessages, (message, index) => {\r\n\r\n            return (\r\n                <div className=\"render-messages-wrapper__item\" key={index}>\r\n                    <div>\r\n                        <img src={message.user.avatar}  alt=\"Dev Chat Image\"/>\r\n                    </div>\r\n                    <div>\r\n                        <p>\r\n                            <b>{message.user.name}</b>\r\n                            <span>( {moment(message.timestamp).fromNow()} )</span>\r\n                        </p>\r\n                        {checkTextImage(message)}\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    };\r\n\r\n    return (\r\n        <div className=\"render-messages\" id=\"render-messages-container\">\r\n            <div className=\"render-messages-wrapper\">\r\n                {showMessages(messages)}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RenderMessages;","import React, { Component } from 'react';\r\nimport { Progress } from 'antd';\r\nimport FileUploader from \"react-firebase-file-uploader\";\r\nimport firebase from \"../../../firebase\";\r\n\r\nclass ImageUploader extends Component {\r\n\r\n    state = {\r\n        isUploading: false,\r\n        progress: 0,\r\n        imageUrl: \"\"\r\n    };\r\n\r\n    handleUploadStart = () => {\r\n        this.setState({\r\n            isUploading: true,\r\n            progress: 0\r\n        })\r\n    };\r\n\r\n    handleProgress = progress => {\r\n        this.setState({\r\n            progress\r\n        })\r\n    };\r\n\r\n    handleUploadError = error => {\r\n        this.setState({\r\n            isUploading: false\r\n        })\r\n    };\r\n\r\n    handleUploadSuccess = filename => {\r\n        this.setState({\r\n            progress: 100,\r\n            isUploading: false\r\n        });\r\n\r\n\r\n        firebase.storage().ref(\"images\").child(filename).getDownloadURL()\r\n            .then((url) => {\r\n                this.props.imageData(url);\r\n            })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"file-uploader\">\r\n                <FileUploader\r\n                    accept=\"image/*\"\r\n                    name=\"chat-image\"\r\n                    randomizeFilename\r\n                    storageRef={firebase.storage().ref(\"images\")}\r\n                    onUploadStart={this.handleUploadStart}\r\n                    onUploadError={this.handleUploadError}\r\n                    onUploadSuccess={this.handleUploadSuccess}\r\n                    onProgress={this.handleProgress}\r\n                />\r\n                <div style={{ marginTop: \"15px\" }}>\r\n                    {this.state.isUploading ?\r\n                        <div>Progress:  <Progress percent={this.state.isUploading && this.state.progress} /> </div> : null\r\n                    }\r\n                </div>\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ImageUploader;","import React, { useState } from 'react';\r\nimport { Input, Button, Modal, Icon, message } from \"antd\";\r\nimport firebase from \"../../firebase\";\r\nimport { Picker } from \"emoji-mart\";\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport ImageUploader from \"../widgets/fileUploader/FileUploader\";\r\nimport _ from \"lodash\";\r\nimport \"./messageForm.scss\";\r\n\r\nconst MessageForm = ({ channel, user, typing }) => {\r\n\r\n    const [inputs, setInputs] = useState({ message: \"\" });\r\n    const [modal, setModal] = useState({ isVisible: false });\r\n    const [emojiPicker, setEmojiPicker] = useState({ isVisible: false });\r\n\r\n    const toggleModal = () => {\r\n        setModal({\r\n            ...modal,\r\n            isVisible: !modal.isVisible\r\n        });\r\n    };\r\n\r\n    const handleInput = event => {\r\n        setInputs({\r\n            ...inputs,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    };\r\n\r\n    const submitHandler = event => {\r\n        event.preventDefault();\r\n\r\n        const senderMessage = {\r\n            content: inputs.message,\r\n            timestamp: firebase.database.ServerValue.TIMESTAMP,\r\n            user: {\r\n                avatar: user.photoURL,\r\n                name: user.displayName,\r\n                id: user.uid\r\n            }\r\n        };\r\n\r\n        if (inputValid()) {\r\n            firebase.database().ref(\"messages\").child(channel.id).push().set(senderMessage);\r\n            firebase.database().ref(\"notifications\").child(channel.id).update({\r\n                user: {\r\n                    name: user.displayName,\r\n                    id: user.uid\r\n                }\r\n            });\r\n\r\n            setInputs({\r\n                ...inputs,\r\n                message: \"\"\r\n            });\r\n        }\r\n    };\r\n\r\n    const inputValid = () => {\r\n        if (inputs.message.length > 0) {\r\n            return true;\r\n        } else {\r\n            error();\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const error = () => {\r\n        message.error(\"New message can't be empty\");\r\n    };\r\n\r\n    const isTyping = event => {\r\n        typing(event.target.value);\r\n\r\n        if (inputs.message) {\r\n            firebase.database().ref(\"isTyping\").child(channel.id).child(user.uid).set(user.displayName)\r\n        } else {\r\n            firebase.database().ref(\"isTyping\").child(channel.id).child(user.uid).remove();\r\n        }\r\n    };\r\n\r\n    const getImageData = imageUrl => {\r\n        const senderMessage = {\r\n            image: imageUrl,\r\n            timestamp: firebase.database.ServerValue.TIMESTAMP,\r\n            user: {\r\n                avatar: user.photoURL,\r\n                name: user.displayName,\r\n                id: user.uid\r\n            }\r\n        };\r\n\r\n        firebase.database().ref(\"messages\").child(channel.id).push().set(senderMessage);\r\n    };\r\n\r\n    const toggleEmojiPicker = event => {\r\n        event.preventDefault();\r\n\r\n        setEmojiPicker({\r\n            ...emojiPicker,\r\n            isVisible: !emojiPicker.isVisible\r\n        })\r\n    };\r\n\r\n    const renderEmojiPicker = () => {\r\n        return emojiPicker.isVisible ? <Picker\r\n            set=\"apple\"\r\n            style={{ position: 'absolute', bottom: '115px', left: '25px', zIndex: \"999\" }}\r\n            title=\"Pick your emoji\"\r\n            emoji=\"point_up\"\r\n            onSelect={handleAddEmoji}\r\n        /> : null\r\n    };\r\n\r\n    const handleAddEmoji = emoji => {\r\n        setInputs({\r\n            ...inputs,\r\n            message: inputs.message.concat(emoji.native)\r\n        });\r\n\r\n        setEmojiPicker({\r\n            ...emojiPicker,\r\n            isVisible: !emojiPicker.isVisible\r\n        })\r\n    };\r\n\r\n    const keyDownHandler = event => {\r\n        if (event.keyCode === 13) {\r\n            submitHandler(event);\r\n        }\r\n    };\r\n\r\n    const emojiButtonClicked = () => {\r\n        return emojiPicker.isVisible ? \"emoji-button-clicked\" : \"\"\r\n    };\r\n\r\n    return (\r\n        <div className=\"message-form\">\r\n            <form onSubmit={submitHandler}>\r\n                <div className=\"message-form__item\">\r\n                    <div className=\"send-message-wrap\">\r\n                        <button onClick={(event) => toggleEmojiPicker(event)} className={emojiButtonClicked()}>\r\n                            <Icon type=\"plus\" />\r\n                        </button>\r\n                        <Input\r\n                            placeholder=\"Enter new message\"\r\n                            autoComplete=\"off\"\r\n                            name=\"message\"\r\n                            type=\"text\"\r\n                            value={inputs.message}\r\n                            onChange={handleInput}\r\n                            onKeyDown={keyDownHandler}\r\n                            onKeyUp={isTyping}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"message-form__item\">\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        <Icon type=\"mail\" /> Send Message\r\n                    </Button>\r\n                    <Button type=\"primary\" onClick={toggleModal}>\r\n                        <Icon type=\"file-image\" /> Upload an Image\r\n                    </Button>\r\n                </div>\r\n\r\n                {renderEmojiPicker()}\r\n            </form>\r\n\r\n            <Modal\r\n                title=\"Upload an image\"\r\n                visible={modal.isVisible}\r\n                onOk={() => toggleModal()}\r\n                okText=\"Done Uploading\"\r\n                onCancel={() => toggleModal()}\r\n            >\r\n                <ImageUploader\r\n                    imageData={(data) => getImageData(data)}\r\n                />\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MessageForm;","import React, { useState, useEffect, useRef } from \"react\";\r\nimport IsTyping from \"./isTyping\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport firebase from \"../../firebase\";\r\nimport _ from \"lodash\";\r\n\r\nimport MessageHeader from \"./messageHeader\";\r\nimport RenderMessages from \"./renderMessages\";\r\nimport MessageForm from \"./messageForm\";\r\nimport \"./messageComponent.scss\";\r\n\r\nconst MessageComponent = props => {\r\n\r\n    const { channel } = props;\r\n    const { user } = props;\r\n    const { channelType } = props;\r\n\r\n\r\n    // Use State\r\n    const [messages, setMessages] = useState({ updatedMessages: [] });\r\n    const [filteredMessages, setFilteredMessages] = useState({ messages: [] });\r\n    const [searchTerm, setSearchTerm] = useState({ value: \"\" });\r\n    const [searchLoader, setSearchLoader] = useState({ loading: false });\r\n\r\n    useEffect(() => {\r\n\r\n        if (channel) {\r\n            let updatedMessages = [];\r\n            const messagesRef = firebase.database().ref(\"messages\").child(channel.id);\r\n            const listener = messagesRef.on(\"child_added\", snapshot => {\r\n                let getMessages = snapshot.val();\r\n                updatedMessages.push(getMessages);\r\n\r\n                setMessages({\r\n                    ...messages,\r\n                    updatedMessages\r\n                });\r\n            });\r\n\r\n            return () => messagesRef.off();\r\n\r\n        }\r\n\r\n    }, []);\r\n\r\n    const [isTyping, setIsTyping] = useState({ typing: \"\" });\r\n\r\n    const channelUsers = () => {\r\n        const allMessages = messages !== undefined && messages.updatedMessages;\r\n\r\n        const reducedMessages = _.reduce(allMessages, (acc, sum) => {\r\n            return acc.concat(sum.sender);\r\n        }, []);\r\n\r\n        return _.uniqBy(reducedMessages).length;\r\n    };\r\n\r\n    const trackIsTyping = value => {\r\n        setIsTyping({\r\n            ...isTyping,\r\n            typing: value\r\n        })\r\n    };\r\n\r\n    const handleSearch = (event) => {\r\n        setSearchTerm({\r\n            ...searchTerm,\r\n            value: event.target.value\r\n        })\r\n    };\r\n\r\n    const filterMessages = () => {\r\n        const searchRegex = new RegExp(searchTerm.value, \"gi\");\r\n        const allMessages = [...messages.updatedMessages];\r\n\r\n        if (searchTerm.value.length > 0) {\r\n            setSearchLoader({\r\n                ...searchLoader,\r\n                loading: true\r\n            })\r\n        }\r\n\r\n        const filteredMessages = _.reduce(allMessages, (acc, sum) => {\r\n\r\n            if ((sum.content && sum.content.match(searchRegex)) || (sum.user.name && sum.user.name.match(searchRegex))) {\r\n                acc.push(sum);\r\n            }\r\n\r\n            return acc;\r\n        }, []);\r\n\r\n        setTimeout(() => {\r\n            setSearchLoader({\r\n                ...searchLoader,\r\n                loading: false\r\n            })\r\n        }, 1000)\r\n\r\n        setFilteredMessages({\r\n            ...filterMessages,\r\n            messages: filteredMessages\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-wrapper__item\">\r\n            <MessageHeader\r\n                channel={channel}\r\n                channelUsers={channelUsers()}\r\n                search={(event) => handleSearch(event)}\r\n                messages={messages.updatedMessages}\r\n                filtered={filterMessages}\r\n                loader={searchLoader.loading}\r\n                channelType={channelType}\r\n                />\r\n            <RenderMessages\r\n                messages={searchTerm.value.length > 0 ? filteredMessages.messages : messages.updatedMessages}\r\n                channel={channel}\r\n            />\r\n\r\n            <IsTyping\r\n                channel={channel}\r\n                user={user}\r\n                sendTyping={isTyping.typing}\r\n            />\r\n\r\n            <MessageForm\r\n                channel={channel}\r\n                user={user}\r\n                typing={(value) => trackIsTyping(value)}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nMessageComponent.propTypes = {\r\n    user: PropTypes.object,\r\n    channel: PropTypes.object,\r\n    channelType: PropTypes.string\r\n};\r\n\r\nexport default connect(null, null)(MessageComponent);","import React, {useState, useEffect} from 'react';\r\nimport {Icon, Collapse} from \"antd\";\r\nimport firebase from \"../../firebase\";\r\nimport _ from \"lodash\";\r\nimport \"./ChannelInfo.scss\";\r\n\r\nconst {Panel} = Collapse;\r\n\r\nconst ChannelInfo = ({user, channel, channelType}) => {\r\n\r\n    const [posters, setPosters] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if(channel) {\r\n            let usersMessages = [];\r\n            const messagesRef = firebase.database().ref(\"messages\").child(channel.id);\r\n            messagesRef.on(\"child_added\", snapshot => {\r\n                usersMessages.push(snapshot.val());\r\n\r\n                const getMessages = _.reduce(usersMessages, (acc,sum) => {\r\n                    return acc.concat(sum.user.name)\r\n                }, []);\r\n\r\n                const result = _.values(_.groupBy(getMessages)).map(d => ({\r\n                    name: d[0], count: d.length\r\n                }));\r\n                \r\n                const sorted = _.orderBy(result, ['count'], ['desc'] );\r\n\r\n                setPosters({\r\n                    ...posters,\r\n                    sorted\r\n                });\r\n\r\n            });\r\n        }\r\n\r\n    }, [channel]);\r\n\r\n\r\n    const postsCount = poster => {\r\n      return poster.count > 1 ? `${poster.count} posts` : `${poster.count} post`\r\n    };\r\n\r\n    const setTopPosters = () => {\r\n        if(posters.length !== 0) {\r\n            return _.map(posters.sorted, (poster, index) => {\r\n                return (\r\n                    <li key={index}>\r\n                        {poster.name} <b>{postsCount(poster)}</b>\r\n                    </li>\r\n                )\r\n            })\r\n        }\r\n    };\r\n\r\n    const renderChannel = () => {\r\n\r\n        let channelInfo = null;\r\n\r\n        if(channel && channelType === \"public\") {\r\n            channelInfo = (\r\n                <div className=\"channel-info-wrap\">\r\n                    <div>\r\n                        <h3>{renderChannelIcon(channelType)} {channel.name}</h3>\r\n                    </div>\r\n                    <div>\r\n                        <Collapse>\r\n                            <Panel header={<span><Icon type=\"info-circle\" /> Channel Details</span>} key=\"1\">\r\n                                <p>{channel.details}</p>\r\n                            </Panel>\r\n                            <Panel header={<span><Icon type=\"user\" /> Top Posters</span>} key=\"2\">\r\n                                <ul>\r\n                                    {setTopPosters()}\r\n                                </ul>\r\n                            </Panel>\r\n                            <Panel header={<span><Icon type=\"pushpin\" /> Created by</span>} key=\"3\">\r\n                                <div>\r\n                                    <p><img src={channel.createdBy.avatar} alt=\"Dev Chat Image\" /> <b>{channel.createdBy.name}</b> </p>\r\n                                </div>\r\n                            </Panel>\r\n                        </Collapse>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return channelInfo;\r\n    };\r\n\r\n    const renderChannelIcon = channelType => {\r\n        let channelTypeIcon = null;\r\n\r\n        if(channelType === \"private\") {\r\n            channelTypeIcon = <Icon type=\"user\" />\r\n        } else if(channelType === \"public\") {\r\n            channelTypeIcon = <Icon type=\"number\" />\r\n        }\r\n\r\n        return channelTypeIcon;\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"chat-wrapper__item\">\r\n            {renderChannel()}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChannelInfo;","import React from 'react';\r\nimport \"./Loader.scss\";\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\r\n    );\r\n};\r\n\r\nexport default Loader;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setCurrentChannel } from \"./store/actions/index\";\r\nimport \"./styles/main.scss\";\r\n\r\nimport SidePanel from \"./components/sidepanel/SidePanel\";\r\nimport MessageComponent from \"./components/messages/messageComponent\";\r\nimport ChannelInfo from \"./components/channelinfo/ChannelInfo\";\r\nimport Loader from \"./components/widgets/loader/Loader\";\r\n\r\nclass App extends Component {\r\n\r\n    state = {\r\n        firstLoading: true\r\n    };\r\n\r\n    render() {\r\n        return !this.props.currentUser ? <Loader /> : (\r\n            <div className=\"chat-wrapper\">\r\n                <SidePanel\r\n                    user={this.props.currentUser}\r\n                    channel={this.props.currentChannel}\r\n                    key={this.props.currentUser}\r\n                />\r\n\r\n                <MessageComponent\r\n                    user={this.props.currentUser}\r\n                    channel={this.props.currentChannel}\r\n                    channelType={this.props.channelType}\r\n                    key={Math.random()}\r\n                />\r\n\r\n                <ChannelInfo\r\n                    user={this.props.currentUser}\r\n                    channel={this.props.currentChannel}\r\n                    channelType={this.props.channelType}\r\n                    key={Math.random()}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentUser: state.user.currentUser,\r\n        currentChannel: state.channel.currentChannel,\r\n        channelType: state.channel.channelType\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setCurrentChannel: (user) => dispatch(setCurrentChannel(user))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Input, Button, Icon } from \"antd\";\r\nimport _ from \"lodash\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"./Authentication.scss\";\r\n\r\nimport firebase from \"../../firebase\";\r\n\r\nconst Login = () => {\r\n\r\n    const [inputs, setInputs] = useState({\r\n        email: \"\",\r\n        password: \"\"\r\n    });\r\n\r\n    const [formErrors, setFormErrors] = useState({\r\n        err: []\r\n    });\r\n\r\n    const [loader, setLoader] = useState({\r\n        loading: false\r\n    })\r\n\r\n    const handleInput = event => {\r\n        setInputs({\r\n            ...inputs,\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        if (formIsValid(inputs)) {\r\n            console.log(\"Success\");\r\n        }\r\n    }\r\n\r\n    const formIsValid = ({ email, password }) => {\r\n        let error = \"\";\r\n        let errors = [];\r\n\r\n        if (!checkEmailValid(email)) {\r\n            error = \"Please enter a valid e-mail address\";\r\n            setFormErrors({\r\n                ...formErrors,\r\n                err: errors.concat(error)\r\n            });\r\n            return false;\r\n        } else if (!checkPasswordValid(password)) {\r\n            error = \"Password should contain at least 6 character\";\r\n            setFormErrors({\r\n                ...formErrors,\r\n                err: errors.concat(error)\r\n            });\r\n            return false;\r\n        } else {\r\n            setLoader({\r\n                ...loader,\r\n                loading: true\r\n            });\r\n            firebase.auth().signInWithEmailAndPassword(email, password).then(user => {\r\n                setLoader({\r\n                    ...loader,\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n\r\n                setLoader({\r\n                    ...loader,\r\n                    loading: false\r\n                });\r\n\r\n                console.log(error);\r\n\r\n                setFormErrors({\r\n                    ...formErrors,\r\n                    err: formErrors.err.concat(error.message)\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    const checkEmailValid = email => {\r\n        if (email.match(/\\S+@\\S+\\.\\S+/)) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    const checkPasswordValid = password => {\r\n        if (password.length < 6) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    const showErrors = error => {\r\n        return _.map(error, (err, index) => {\r\n            return <p key={index}>{err}</p>\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"brand\">\r\n                <h1><Icon type=\"wechat\" /> Dev<span>Chat</span></h1>\r\n            </div>\r\n            <div className=\"auth-wrapper\">\r\n                <form onSubmit={handleSubmit} noValidate>\r\n                    <h2><Icon type=\"export\" />Login</h2>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>Enter your email address:</label>\r\n                        <Input\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            onChange={handleInput}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>Enter your password:</label>\r\n                        <Input\r\n                            type=\"password\"\r\n                            name=\"password\"\r\n                            onChange={handleInput}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"show-auth-errors\">\r\n                        {showErrors(formErrors.err)}\r\n                    </div>\r\n\r\n                    <div className=\"form-group\" style={{ textAlign: \"center\" }}>\r\n                        <Button\r\n                            htmlType=\"submit\"\r\n                            type=\"primary\"\r\n                            disabled={loader.loading}\r\n                            loading={loader.loading}\r\n                        >\r\n                            Log In</Button>\r\n                    </div>\r\n\r\n                    <div className=\"auth-switch\">\r\n                        <p>You don't have an account, <Link to=\"/register\">click here</Link></p>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login;","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Input, Button, Icon, message } from \"antd\";\r\nimport _ from \"lodash\";\r\nimport md5 from \"md5\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"./Authentication.scss\";\r\n\r\nimport firebase from \"../../firebase\";\r\n\r\nconst Register = () => {\r\n\r\n    const [inputs, setInputs] = useState({\r\n        name: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        passwordconfirm: \"\"\r\n    });\r\n\r\n    const [errors, setErrors] = useState({\r\n        err: []\r\n    });\r\n\r\n    const [loader, setLoader] = useState({ loading: false });\r\n\r\n    const handleInput = event => {\r\n        setInputs({\r\n            ...inputs,\r\n            [event.target.name]: event.target.value\r\n        })\r\n    };\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        if (formIsValid(inputs)) {\r\n\r\n            setLoader({\r\n                ...loader,\r\n                loading: true\r\n            });\r\n\r\n            setErrors({\r\n                err: []\r\n            });\r\n\r\n            firebase.auth().createUserWithEmailAndPassword(inputs.email, inputs.password).then(createdUser => {\r\n                setLoader({\r\n                    ...loader,\r\n                    loading: true\r\n                });\r\n\r\n                // success(`An e-mail has been sent to ${inputs.email}. Please verify it !`);\r\n                // sendEmailVerification();\r\n\r\n                createdUser.user.updateProfile({\r\n                    displayName: inputs.name,\r\n                    photoURL: `http://gravatar.com/avatar/${md5(\r\n                        createdUser.user.email\r\n                    )}?d=identicon`\r\n                }).then(() => {\r\n                    saveUser(createdUser);\r\n                }).catch(error => {\r\n                    console.log(error);\r\n                    setLoader({\r\n                        ...loader,\r\n                        loading: false\r\n                    });\r\n\r\n                });\r\n            }).catch(error => {\r\n                console.log(error);\r\n                setLoader({\r\n                    ...loader,\r\n                    loading: false\r\n                });\r\n\r\n            });\r\n\r\n        }\r\n    };\r\n\r\n    const saveUser = (user) => {\r\n        return firebase.database().ref(\"users\").child(user.user.uid).set({\r\n            user: user.user.displayName,\r\n            avatar: user.user.photoURL,\r\n            id: user.user.uid\r\n        })\r\n    };\r\n\r\n    const formIsValid = (inputs) => {\r\n        let error = \"\";\r\n        let errors = [];\r\n\r\n        if (emptyInputFields()) {\r\n            error = \"All fields are required\";\r\n            setErrors({\r\n                ...errors,\r\n                err: errors.concat(error)\r\n            });\r\n            return false\r\n        } else if (!emailValid()) {\r\n            error = \"Please enter a valid e-mail address\";\r\n            setErrors({\r\n                ...errors,\r\n                err: errors.concat(error)\r\n            });\r\n            return false\r\n        } else if (!passWordsLength()) {\r\n            error = \"Password should contain at least 6 character\";\r\n            setErrors({\r\n                ...errors,\r\n                err: errors.concat(error)\r\n            });\r\n            return false;\r\n        } else if (!comparePasswords()) {\r\n            error = \"Passwords do not match\";\r\n            setErrors({\r\n                ...errors,\r\n                err: errors.concat(error)\r\n            });\r\n            return false;\r\n        }\r\n\r\n        else {\r\n            return true\r\n        }\r\n    };\r\n\r\n    const emptyInputFields = () => {\r\n        return (\r\n            !inputs.name.length || !inputs.email.length || !inputs.password.length || !inputs.passwordconfirm.length\r\n        )\r\n    };\r\n\r\n    const emailValid = () => {\r\n        if (inputs.email.match(/\\S+@\\S+\\.\\S+/)) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    };\r\n\r\n    const showErrors = () => {\r\n        return _.map(errors.err, (err, index) => {\r\n            return <p key={index}>{err}</p>\r\n        })\r\n    }\r\n\r\n    const passWordsLength = () => {\r\n        if ((inputs.password.length || inputs.passwordconfirm.length) < 6) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    const comparePasswords = () => {\r\n        if (inputs.password !== inputs.passwordconfirm) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    };\r\n\r\n\r\n    const notValid = keyword => {\r\n        return _.some(errors.err, error => error.includes(keyword)) ? \"not-valid\" : \"\"\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"brand\">\r\n                <h1> <Icon type=\"wechat\" /> Dev<span>Chat</span></h1>\r\n            </div>\r\n            <div className=\"auth-wrapper\">\r\n                <form onSubmit={handleSubmit} noValidate>\r\n                    <h2><Icon type=\"export\" />Register</h2>\r\n                    <div className=\"form-group\">\r\n                        <label>Enter your name:</label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            value={inputs.name}\r\n                            onChange={handleInput}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>Enter your email address:</label>\r\n                        <Input\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            value={inputs.email}\r\n                            onChange={handleInput}\r\n                            className={notValid(\"e-mail\")}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>Enter your password:</label>\r\n                        <Input\r\n                            type=\"password\"\r\n                            name=\"password\"\r\n                            value={inputs.password}\r\n                            onChange={handleInput}\r\n                            className={notValid(\"password\")}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>Confirm password:</label>\r\n                        <Input\r\n                            type=\"password\"\r\n                            name=\"passwordconfirm\"\r\n                            value={inputs.passwordconfirm}\r\n                            onChange={handleInput}\r\n                            className={notValid(\"password\")}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"show-auth-errors\">\r\n                        {showErrors()}\r\n                    </div>\r\n\r\n                    <div className=\"form-group\" style={{ textAlign: \"center\" }}>\r\n                        <Button\r\n                            htmlType=\"submit\"\r\n                            type=\"primary\"\r\n                            disabled={loader.loading}\r\n                            loading={loader.loading}\r\n                        >\r\n                            Register</Button>\r\n                    </div>\r\n\r\n                    <div className=\"auth-switch\">\r\n                        <p>You already have an account, <Link to=\"/login\">click here</Link></p>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Register;","import { combineReducers } from \"redux\";\r\nimport * as actionTypes from \"../types\";\r\n\r\nconst initialUserState = {\r\n    currentUser: null,\r\n    isLoading: true\r\n}\r\n\r\nconst user_reducer = (state = initialUserState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_USER:\r\n            return {\r\n                currentUser: action.payload.currentUser,\r\n                isLoading: false\r\n            }\r\n        case actionTypes.CLEAR_USER:\r\n            return {\r\n                ...state,\r\n                isLoading: false\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst initialChannelState = {\r\n    currentChannel: null\r\n}\r\n\r\nconst channel_reducer = (state = initialChannelState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_CURRENT_CHANNEL:\r\n            return {\r\n                ...state,\r\n                currentChannel: action.payload.currentChannel\r\n            }\r\n        case actionTypes.SET_CHANNEL_TYPE:\r\n            return {\r\n                ...state,\r\n                channelType: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    user: user_reducer,\r\n    channel: channel_reducer\r\n});\r\n\r\nexport default rootReducer;","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter, Switch, Route, Redirect, withRouter } from \"react-router-dom\";\r\n\r\nimport App from \"./App\";\r\nimport Login from \"./components/authentication/Login\";\r\nimport Register from \"./components/authentication/Register\";\r\n\r\nimport firebase from \"./firebase\";\r\n\r\nimport { createStore } from \"redux\";\r\nimport { Provider, connect } from \"react-redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport rootReducer from \"./store/reducers\";\r\n\r\nimport { setUser } from \"./store/actions\";\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools());\r\n\r\nclass Root extends Component {\r\n\r\n    componentDidMount() {\r\n        firebase.auth().onAuthStateChanged(user => {\r\n            // console.log(user);\r\n            if (user) {\r\n                this.props.setUser(user);\r\n                this.props.history.push(\"/\");\r\n            } else {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={App} />\r\n                    <Route path=\"/login\" component={Login} />\r\n                    <Route path=\"/register\" component={Register} />\r\n                    <Redirect to=\"/\" />\r\n                </Switch>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setUser: (user) => dispatch(setUser(user))\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoading: state.isLoading\r\n    }\r\n}\r\n\r\n\r\nconst RootWithStore = withRouter(connect(mapStateToProps, mapDispatchToProps)(Root));\r\n\r\n\r\nReactDOM.render(<Provider store={store}>\r\n    <BrowserRouter>\r\n        <RootWithStore />\r\n    </BrowserRouter>\r\n</Provider>, document.getElementById('root'));"],"sourceRoot":""}